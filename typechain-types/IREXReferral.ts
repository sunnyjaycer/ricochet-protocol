/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IREXReferralInterface extends utils.Interface {
  contractName: "IREXReferral";
  functions: {
    "applyForAffiliate(string,string)": FunctionFragment;
    "changeAffiliateAddress(address)": FunctionFragment;
    "disableAffiliate(string)": FunctionFragment;
    "getAffiliateAddress(address)": FunctionFragment;
    "isAffiliateEnabled(string)": FunctionFragment;
    "registerApp(address)": FunctionFragment;
    "safeRegisterCustomer(address,string)": FunctionFragment;
    "unregisterApp(address)": FunctionFragment;
    "verifyAffiliate(string)": FunctionFragment;
    "withdrawAffiliate()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyForAffiliate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAffiliateAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAffiliateEnabled",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registerApp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeRegisterCustomer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterApp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAffiliate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applyForAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAffiliateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAffiliateEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeRegisterCustomer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAffiliate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IREXReferral extends BaseContract {
  contractName: "IREXReferral";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IREXReferralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAffiliate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyForAffiliate(
    name: string,
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAffiliateAddress(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableAffiliate(
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAffiliateAddress(
    customerAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isAffiliateEnabled(
    affiliateId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerApp(
    contractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeRegisterCustomer(
    customerAddr: string,
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterApp(
    contractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyAffiliate(
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAffiliate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableAffiliate(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerApp(contractAddr: string, overrides?: CallOverrides): Promise<void>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterApp(
      contractAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAffiliate(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAffiliate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAffiliate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
