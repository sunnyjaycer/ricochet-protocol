/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BankInterface extends utils.Interface {
  contractName: "Bank";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "REPORTER_ROLE()": FunctionFragment;
    "addKeeper(address)": FunctionFragment;
    "addReporter(address)": FunctionFragment;
    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "getBankFactoryOwner()": FunctionFragment;
    "getCollateralTokenAddress()": FunctionFragment;
    "getCollateralTokenLastUpdatedAt()": FunctionFragment;
    "getCollateralTokenPrice()": FunctionFragment;
    "getCollateralTokenPriceGranularity()": FunctionFragment;
    "getCollateralizationRatio()": FunctionFragment;
    "getCurrentValue(uint256)": FunctionFragment;
    "getDebtTokenAddress()": FunctionFragment;
    "getDebtTokenLastUpdatedAt()": FunctionFragment;
    "getDebtTokenPrice()": FunctionFragment;
    "getDebtTokenPriceGranularity()": FunctionFragment;
    "getInterestRate()": FunctionFragment;
    "getLiquidationPenalty()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOriginationFee()": FunctionFragment;
    "getReserveBalance()": FunctionFragment;
    "getReserveCollateralBalance()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getVaultCollateralAmount()": FunctionFragment;
    "getVaultCollateralizationRatio(address)": FunctionFragment;
    "getVaultDebtAmount()": FunctionFragment;
    "getVaultRepayAmount()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reserveDeposit(uint256)": FunctionFragment;
    "reserveWithdraw(uint256)": FunctionFragment;
    "reserveWithdrawCollateral(uint256)": FunctionFragment;
    "revokeKeeper(address)": FunctionFragment;
    "revokeReporter(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBankFactoryOwner(address)": FunctionFragment;
    "setCollateral(address,uint256,uint256,uint256)": FunctionFragment;
    "setDebt(address,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCollateralPrice()": FunctionFragment;
    "updateDebtPrice()": FunctionFragment;
    "vaultBorrow(uint256)": FunctionFragment;
    "vaultDeposit(uint256)": FunctionFragment;
    "vaultRepay(uint256)": FunctionFragment;
    "vaultWithdraw(uint256)": FunctionFragment;
    "vaults(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPORTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addKeeper", values: [string]): string;
  encodeFunctionData(functionFragment: "addReporter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "afterAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBankFactoryOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenLastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenPriceGranularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenLastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenPriceGranularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOriginationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveCollateralBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateralizationRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDebtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultRepayAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWithdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeReporter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBankFactoryOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebt",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRepay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPORTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBankFactoryOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenPriceGranularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenPriceGranularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDebtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBankFactoryOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultRepay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "Liquidation(address,uint256)": EventFragment;
    "PriceUpdate(address,uint256)": EventFragment;
    "ReserveDeposit(uint256)": EventFragment;
    "ReserveWithdraw(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "VaultBorrow(address,uint256)": EventFragment;
    "VaultDeposit(address,uint256)": EventFragment;
    "VaultRepay(address,uint256)": EventFragment;
    "VaultWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultWithdraw"): EventFragment;
}

export type LiquidationEvent = TypedEvent<
  [string, BigNumber],
  { borrower: string; debtAmount: BigNumber }
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export type PriceUpdateEvent = TypedEvent<
  [string, BigNumber],
  { token: string; price: BigNumber }
>;

export type PriceUpdateEventFilter = TypedEventFilter<PriceUpdateEvent>;

export type ReserveDepositEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ReserveDepositEventFilter = TypedEventFilter<ReserveDepositEvent>;

export type ReserveWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type ReserveWithdrawEventFilter = TypedEventFilter<ReserveWithdrawEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type VaultBorrowEvent = TypedEvent<
  [string, BigNumber],
  { borrower: string; amount: BigNumber }
>;

export type VaultBorrowEventFilter = TypedEventFilter<VaultBorrowEvent>;

export type VaultDepositEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type VaultDepositEventFilter = TypedEventFilter<VaultDepositEvent>;

export type VaultRepayEvent = TypedEvent<
  [string, BigNumber],
  { borrower: string; amount: BigNumber }
>;

export type VaultRepayEventFilter = TypedEventFilter<VaultRepayEvent>;

export type VaultWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { borrower: string; amount: BigNumber }
>;

export type VaultWithdrawEventFilter = TypedEventFilter<VaultWithdrawEvent>;

export interface Bank extends BaseContract {
  contractName: "Bank";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REPORTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addKeeper(
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReporter(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBankFactoryOwner(overrides?: CallOverrides): Promise<[string]>;

    getCollateralTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollateralTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollateralizationRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        ifRetrieve: boolean;
        value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    getDebtTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebtTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInterestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidationPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOriginationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveCollateralBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultCollateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultDebtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultRepayAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { principal: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      vaultOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeKeeper(
      oldKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeReporter(
      oldUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateralPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDebtPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultBorrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultRepay(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralAmount: BigNumber;
        debtAmount: BigNumber;
        createdAt: BigNumber;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  REPORTER_ROLE(overrides?: CallOverrides): Promise<string>;

  addKeeper(
    keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReporter(
    updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementCreated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementUpdated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeAgreementCreated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementUpdated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getBankFactoryOwner(overrides?: CallOverrides): Promise<string>;

  getCollateralTokenAddress(overrides?: CallOverrides): Promise<string>;

  getCollateralTokenLastUpdatedAt(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralTokenPriceGranularity(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentValue(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
    }
  >;

  getDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

  getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  getDebtTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<BigNumber>;

  getInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveCollateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultCollateralizationRatio(
    vaultOwner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultRepayAmount(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    creator: string,
    bankName: string,
    interestRate: BigNumberish,
    originationFee: BigNumberish,
    collateralizationRatio: BigNumberish,
    liquidationPenalty: BigNumberish,
    period: BigNumberish,
    bankFactoryOwner: string,
    oracleContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    vaultOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveDeposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveWithdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveWithdrawCollateral(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeKeeper(
    oldKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeReporter(
    oldUpdater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBankFactoryOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateral(
    collateralToken: string,
    collateralTokenTellorRequestId: BigNumberish,
    collateralTokenPriceGranularity: BigNumberish,
    collateralTokenPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebt(
    debtToken: string,
    debtTokenTellorRequestId: BigNumberish,
    debtTokenPriceGranularity: BigNumberish,
    debtTokenPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateralPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDebtPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultBorrow(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultDeposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultRepay(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultWithdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      collateralAmount: BigNumber;
      debtAmount: BigNumber;
      createdAt: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    REPORTER_ROLE(overrides?: CallOverrides): Promise<string>;

    addKeeper(keeper: string, overrides?: CallOverrides): Promise<void>;

    addReporter(updater: string, overrides?: CallOverrides): Promise<void>;

    afterAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getBankFactoryOwner(overrides?: CallOverrides): Promise<string>;

    getCollateralTokenAddress(overrides?: CallOverrides): Promise<string>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        ifRetrieve: boolean;
        value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    getDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

    getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveCollateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRepayAmount(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(vaultOwner: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeKeeper(oldKeeper: string, overrides?: CallOverrides): Promise<void>;

    revokeReporter(
      oldUpdater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralPrice(overrides?: CallOverrides): Promise<void>;

    updateDebtPrice(overrides?: CallOverrides): Promise<void>;

    vaultBorrow(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultRepay(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralAmount: BigNumber;
        debtAmount: BigNumber;
        createdAt: BigNumber;
      }
    >;
  };

  filters: {
    "Liquidation(address,uint256)"(
      borrower?: string | null,
      debtAmount?: null
    ): LiquidationEventFilter;
    Liquidation(
      borrower?: string | null,
      debtAmount?: null
    ): LiquidationEventFilter;

    "PriceUpdate(address,uint256)"(
      token?: string | null,
      price?: null
    ): PriceUpdateEventFilter;
    PriceUpdate(token?: string | null, price?: null): PriceUpdateEventFilter;

    "ReserveDeposit(uint256)"(amount?: null): ReserveDepositEventFilter;
    ReserveDeposit(amount?: null): ReserveDepositEventFilter;

    "ReserveWithdraw(address,uint256)"(
      token?: string | null,
      amount?: null
    ): ReserveWithdrawEventFilter;
    ReserveWithdraw(
      token?: string | null,
      amount?: null
    ): ReserveWithdrawEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "VaultBorrow(address,uint256)"(
      borrower?: string | null,
      amount?: null
    ): VaultBorrowEventFilter;
    VaultBorrow(
      borrower?: string | null,
      amount?: null
    ): VaultBorrowEventFilter;

    "VaultDeposit(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): VaultDepositEventFilter;
    VaultDeposit(owner?: string | null, amount?: null): VaultDepositEventFilter;

    "VaultRepay(address,uint256)"(
      borrower?: string | null,
      amount?: null
    ): VaultRepayEventFilter;
    VaultRepay(borrower?: string | null, amount?: null): VaultRepayEventFilter;

    "VaultWithdraw(address,uint256)"(
      borrower?: string | null,
      amount?: null
    ): VaultWithdrawEventFilter;
    VaultWithdraw(
      borrower?: string | null,
      amount?: null
    ): VaultWithdrawEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REPORTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addKeeper(
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReporter(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBankFactoryOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveCollateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRepayAmount(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      vaultOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeKeeper(
      oldKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeReporter(
      oldUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateralPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDebtPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultBorrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultRepay(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REPORTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKeeper(
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReporter(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBankFactoryOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationPenalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOriginationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveCollateralBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultDebtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultRepayAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      vaultOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeKeeper(
      oldKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeReporter(
      oldUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDebtPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultBorrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultRepay(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
