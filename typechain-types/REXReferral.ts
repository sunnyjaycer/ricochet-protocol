/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface REXReferralInterface extends utils.Interface {
  contractName: "REXReferral";
  functions: {
    "APP_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addressToAffiliate(address)": FunctionFragment;
    "affiliateIdToAffiliate(string)": FunctionFragment;
    "affiliates(uint256)": FunctionFragment;
    "applyForAffiliate(string,string)": FunctionFragment;
    "changeAffiliateAddress(address)": FunctionFragment;
    "customerToAffiliate(address)": FunctionFragment;
    "disableAffiliate(string)": FunctionFragment;
    "getAffiliateAddress(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isAffiliateEnabled(string)": FunctionFragment;
    "isCustomerOrganic(address)": FunctionFragment;
    "registerApp(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeRegisterCustomer(address,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unregisterApp(address)": FunctionFragment;
    "verifyAffiliate(string)": FunctionFragment;
    "withdrawAffiliate()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "APP_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressToAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliateIdToAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForAffiliate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAffiliateAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "customerToAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAffiliateEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCustomerOrganic",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registerApp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeRegisterCustomer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterApp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAffiliate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "APP_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliateIdToAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "affiliates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyForAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAffiliateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customerToAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAffiliateEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCustomerOrganic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeRegisterCustomer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAffiliate",
    data: BytesLike
  ): Result;

  events: {
    "AffiliateApplied(string,string)": EventFragment;
    "AffiliateWithdrawn(string)": EventFragment;
    "OrganicCustomerRegistered(address)": EventFragment;
    "ReferredCustomerRegistered(address,address,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AffiliateApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AffiliateWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrganicCustomerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferredCustomerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type AffiliateAppliedEvent = TypedEvent<
  [string, string],
  { name: string; id: string }
>;

export type AffiliateAppliedEventFilter =
  TypedEventFilter<AffiliateAppliedEvent>;

export type AffiliateWithdrawnEvent = TypedEvent<
  [string],
  { affiliateId: string }
>;

export type AffiliateWithdrawnEventFilter =
  TypedEventFilter<AffiliateWithdrawnEvent>;

export type OrganicCustomerRegisteredEvent = TypedEvent<
  [string],
  { customer: string }
>;

export type OrganicCustomerRegisteredEventFilter =
  TypedEventFilter<OrganicCustomerRegisteredEvent>;

export type ReferredCustomerRegisteredEvent = TypedEvent<
  [string, string, string],
  { customer: string; affiliate: string; affiliateId: string }
>;

export type ReferredCustomerRegisteredEventFilter =
  TypedEventFilter<ReferredCustomerRegisteredEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface REXReferral extends BaseContract {
  contractName: "REXReferral";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: REXReferralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    APP_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addressToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    affiliateIdToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    affiliates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, string] & {
        name: string;
        id: string;
        enabled: boolean;
        totalRef: BigNumber;
        addr: string;
      }
    >;

    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    customerToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disableAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCustomerOrganic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unregisterApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAffiliate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  APP_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addressToAffiliate(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  affiliateIdToAffiliate(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  affiliates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber, string] & {
      name: string;
      id: string;
      enabled: boolean;
      totalRef: BigNumber;
      addr: string;
    }
  >;

  applyForAffiliate(
    name: string,
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAffiliateAddress(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  customerToAffiliate(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disableAffiliate(
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAffiliateAddress(
    customerAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAffiliateEnabled(
    affiliateId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCustomerOrganic(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  registerApp(
    contractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeRegisterCustomer(
    customerAddr: string,
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unregisterApp(
    contractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyAffiliate(
    affiliateId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAffiliate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    APP_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addressToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliateIdToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, string] & {
        name: string;
        id: string;
        enabled: boolean;
        totalRef: BigNumber;
        addr: string;
      }
    >;

    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    customerToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableAffiliate(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCustomerOrganic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerApp(contractAddr: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unregisterApp(
      contractAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAffiliate(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AffiliateApplied(string,string)"(
      name?: null,
      id?: null
    ): AffiliateAppliedEventFilter;
    AffiliateApplied(name?: null, id?: null): AffiliateAppliedEventFilter;

    "AffiliateWithdrawn(string)"(
      affiliateId?: null
    ): AffiliateWithdrawnEventFilter;
    AffiliateWithdrawn(affiliateId?: null): AffiliateWithdrawnEventFilter;

    "OrganicCustomerRegistered(address)"(
      customer?: null
    ): OrganicCustomerRegisteredEventFilter;
    OrganicCustomerRegistered(
      customer?: null
    ): OrganicCustomerRegisteredEventFilter;

    "ReferredCustomerRegistered(address,address,string)"(
      customer?: null,
      affiliate?: null,
      affiliateId?: null
    ): ReferredCustomerRegisteredEventFilter;
    ReferredCustomerRegistered(
      customer?: null,
      affiliate?: null,
      affiliateId?: null
    ): ReferredCustomerRegisteredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    APP_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addressToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliateIdToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    customerToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCustomerOrganic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAffiliate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APP_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    affiliateIdToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    affiliates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyForAffiliate(
      name: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAffiliateAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    customerToAffiliate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAffiliateAddress(
      customerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAffiliateEnabled(
      affiliateId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCustomerOrganic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeRegisterCustomer(
      customerAddr: string,
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterApp(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyAffiliate(
      affiliateId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAffiliate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
